"""added clinical trials unique constraints

Revision ID: 5ca247eca1bd
Revises: a2d973c2a9ab
Create Date: 2018-06-24 12:12:38.953663

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '5ca247eca1bd'
down_revision = 'a2d973c2a9ab'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('participant_flow_periods', schema='clinicaltrials')
    op.drop_table('measure_measure_classes', schema='clinicaltrials')
    op.drop_table('measure_category_measurements', schema='clinicaltrials')
    op.drop_table('event_list_categories', schema='clinicaltrials')
    op.drop_table('event_event_counts', schema='clinicaltrials')
    op.drop_table('measure_class_categories', schema='clinicaltrials')
    op.drop_table('measurements', schema='clinicaltrials')
    op.drop_table('period_drop_withdraw_reasons', schema='clinicaltrials')
    op.drop_table('baseline_measure_analyzeds', schema='clinicaltrials')
    op.drop_table('measure_measure_analyzeds', schema='clinicaltrials')
    op.drop_table('drop_withdraw_reasons', schema='clinicaltrials')
    op.drop_table('measure_class_analyzeds', schema='clinicaltrials')
    op.drop_table('event_category_events', schema='clinicaltrials')
    op.drop_table('event_counts', schema='clinicaltrials')
    op.drop_table('period_milestones', schema='clinicaltrials')
    op.drop_table('baseline_measures', schema='clinicaltrials')
    op.drop_table('participant_flow_groups', schema='clinicaltrials')
    op.drop_table('reported_event_groups', schema='clinicaltrials')
    op.drop_table('measure_analyzed_counts', schema='clinicaltrials')
    op.drop_table('analysis_groups', schema='clinicaltrials')
    op.drop_table('baseline_groups', schema='clinicaltrials')
    op.drop_index('ix_clinicaltrials_events_assessment', table_name='events', schema='clinicaltrials')
    op.drop_table('events', schema='clinicaltrials')
    op.drop_table('event_categories', schema='clinicaltrials')
    op.drop_table('result_outcome_groups', schema='clinicaltrials')
    op.drop_table('milestone_participants', schema='clinicaltrials')
    op.drop_table('result_outcomes', schema='clinicaltrials')
    op.drop_index('ix_clinicaltrials_event_lists_default_assessment', table_name='event_lists', schema='clinicaltrials')
    op.drop_table('reported_events', schema='clinicaltrials')
    op.drop_table('event_lists', schema='clinicaltrials')
    op.drop_table('milestones', schema='clinicaltrials')
    op.drop_table('measure_categories', schema='clinicaltrials')
    op.drop_table('periods', schema='clinicaltrials')
    op.drop_table('participants', schema='clinicaltrials')
    op.drop_table('measure_counts', schema='clinicaltrials')
    op.drop_table('groups', schema='clinicaltrials')
    op.drop_table('measure_analyzeds', schema='clinicaltrials')
    op.drop_index('ix_clinicaltrials_analyses_dispersion_type',
                  table_name='analyses', schema='clinicaltrials')
    op.drop_index('ix_clinicaltrials_analyses_non_inferiority_type',
                  table_name='analyses', schema='clinicaltrials')
    op.drop_table('analyses', schema='clinicaltrials')
    op.drop_table('measure_classes', schema='clinicaltrials')
    op.drop_table('participant_flows', schema='clinicaltrials')
    op.drop_table('measures', schema='clinicaltrials')
    op.add_column('interventions', sa.Column('md5', sa.LargeBinary(length=16), nullable=False), schema='clinicaltrials')
    op.create_index(op.f('ix_clinicaltrials_interventions_md5'), 'interventions', ['md5'], unique=True, schema='clinicaltrials')
    op.add_column('locations', sa.Column('md5', sa.LargeBinary(length=16), nullable=False), schema='clinicaltrials')
    op.create_index(op.f('ix_clinicaltrials_locations_md5'), 'locations', ['md5'], unique=True, schema='clinicaltrials')
    op.drop_constraint('uq_locations_facility_id', 'locations', schema='clinicaltrials', type_='unique')
    op.drop_table('baselines', schema='clinicaltrials')
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_unique_constraint('uq_locations_facility_id', 'locations', ['facility_id', 'contact_primary_id', 'contact_backup_id'], schema='clinicaltrials')
    op.drop_index(op.f('ix_clinicaltrials_locations_md5'), table_name='locations', schema='clinicaltrials')
    op.drop_column('locations', 'md5', schema='clinicaltrials')
    op.drop_index(op.f('ix_clinicaltrials_interventions_md5'), table_name='interventions', schema='clinicaltrials')
    op.drop_column('interventions', 'md5', schema='clinicaltrials')
    op.create_table('baselines',
                    sa.Column('baseline_id', sa.BIGINT(),
                              server_default=sa.text(
                                  "nextval('clinicaltrials.baselines_baseline_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('population', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.PrimaryKeyConstraint('baseline_id', name='pk_baselines'),
                    schema='clinicaltrials'
                    )
    op.create_table('result_outcomes',
                    sa.Column('result_outcome_id', sa.BIGINT(),
                              server_default=sa.text(
                                  "nextval('clinicaltrials.result_outcomes_result_outcome_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('type', postgresql.ENUM('PRIMARY', 'SECONDARY',
                                                      'POST_HOC', 'OTHER',
                                                      name='outcometype'),
                              autoincrement=False, nullable=False),
                    sa.Column('title', sa.VARCHAR(), autoincrement=False,
                              nullable=False),
                    sa.Column('description', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('time_frame', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('safety_issue', sa.BOOLEAN(), autoincrement=False,
                              nullable=True),
                    sa.Column('population', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('measure_id', sa.BIGINT(), autoincrement=False,
                              nullable=False),
                    sa.ForeignKeyConstraint(['measure_id'], [
                        'clinicaltrials.measures.measure_id'],
                                            name='fk_result_outcomes_measure_id_measures'),
                    sa.PrimaryKeyConstraint('result_outcome_id',
                                            name='pk_result_outcomes'),
                    schema='clinicaltrials'
                    )
    op.create_table('measure_categories',
                    sa.Column('measure_category_id', sa.BIGINT(),
                              server_default=sa.text(
                                  "nextval('clinicaltrials.measure_categories_measure_category_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('title', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.PrimaryKeyConstraint('measure_category_id',
                                            name='pk_measure_categories'),
                    schema='clinicaltrials',
                    postgresql_ignore_search_path=False
                    )
    op.create_table('periods',
                    sa.Column('period_id', sa.BIGINT(), server_default=sa.text(
                        "nextval('clinicaltrials.periods_period_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('title', sa.VARCHAR(), autoincrement=False,
                              nullable=False),
                    sa.PrimaryKeyConstraint('period_id', name='pk_periods'),
                    schema='clinicaltrials',
                    postgresql_ignore_search_path=False
                    )
    op.create_table('measure_counts',
                    sa.Column('measure_count_id', sa.BIGINT(),
                              server_default=sa.text(
                                  "nextval('clinicaltrials.measure_counts_measure_count_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('group_id', sa.BIGINT(), autoincrement=False,
                              nullable=False),
                    sa.Column('value', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.ForeignKeyConstraint(['group_id'],
                                            ['clinicaltrials.groups.group_id'],
                                            name='fk_measure_counts_group_id_groups'),
                    sa.PrimaryKeyConstraint('measure_count_id',
                                            name='pk_measure_counts'),
                    schema='clinicaltrials'
                    )
    op.create_table('groups',
                    sa.Column('group_id', sa.BIGINT(), server_default=sa.text(
                        "nextval('clinicaltrials.groups_group_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('identifier', sa.VARCHAR(), autoincrement=False,
                              nullable=False),
                    sa.Column('title', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('description', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.PrimaryKeyConstraint('group_id', name='pk_groups'),
                    schema='clinicaltrials',
                    postgresql_ignore_search_path=False
                    )
    op.create_table('reported_events',
                    sa.Column('reported_event_id', sa.BIGINT(),
                              server_default=sa.text(
                                  "nextval('clinicaltrials.reported_events_reported_event_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('time_frame', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('desc', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('serious_event_list_id', sa.BIGINT(),
                              autoincrement=False, nullable=False),
                    sa.Column('other_event_list_id', sa.BIGINT(),
                              autoincrement=False, nullable=False),
                    sa.ForeignKeyConstraint(['other_event_list_id'], [
                        'clinicaltrials.event_lists.event_list_id'],
                                            name='fk_reported_events_other_event_list_id_event_lists'),
                    sa.ForeignKeyConstraint(['serious_event_list_id'], [
                        'clinicaltrials.event_lists.event_list_id'],
                                            name='fk_reported_events_serious_event_list_id_event_lists'),
                    sa.PrimaryKeyConstraint('reported_event_id',
                                            name='pk_reported_events'),
                    schema='clinicaltrials'
                    )
    op.create_table('measure_analyzeds',
                    sa.Column('measure_analyzed_id', sa.BIGINT(),
                              server_default=sa.text(
                                  "nextval('clinicaltrials.measure_analyzeds_measure_analyzed_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('units', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('scope', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.PrimaryKeyConstraint('measure_analyzed_id',
                                            name='pk_measure_analyzeds'),
                    schema='clinicaltrials',
                    postgresql_ignore_search_path=False
                    )
    op.create_table('analyses',
                    sa.Column('analysis_id', sa.BIGINT(),
                              server_default=sa.text(
                                  "nextval('clinicaltrials.analyses_analysis_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('groups_desc', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('non_inferiority_type',
                              postgresql.ENUM('SUPERIORITY', 'NON_INFERIORITY',
                                              'EQUIVALENCE', 'OTHER',
                                              name='noninferioritytype'),
                              autoincrement=False, nullable=True),
                    sa.Column('non_inferiority_desc', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('p_value', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('p_value_desc', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('method', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('method_desc', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('param_type', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('param_value', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('dispersion_type', postgresql.ENUM('SD', 'SEM',
                                                                 name='analysisdispersiontype'),
                              autoincrement=False, nullable=True),
                    sa.Column('dispersion_value', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('ci_percent',
                              postgresql.DOUBLE_PRECISION(precision=53),
                              autoincrement=False, nullable=True),
                    sa.Column('ci_n_sides', postgresql.ENUM('ONE', 'TWO',
                                                            name='numsidestype'),
                              autoincrement=False, nullable=True),
                    sa.Column('ci_lower_limit', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('ci_upper_limit', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('ci_upper_limit_na_comment', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('estimate_desc', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('other_analysis_desc', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('analysis_id', name='pk_analyses'),
                    schema='clinicaltrials'
                    )
    op.create_index('ix_clinicaltrials_analyses_non_inferiority_type',
                    'analyses', ['non_inferiority_type'], unique=False,
                    schema='clinicaltrials')
    op.create_index('ix_clinicaltrials_analyses_dispersion_type', 'analyses',
                    ['dispersion_type'], unique=False, schema='clinicaltrials')
    op.create_table('measure_classes',
                    sa.Column('measure_class_id', sa.BIGINT(),
                              server_default=sa.text(
                                  "nextval('clinicaltrials.measure_classes_measure_class_id_seq'::regclass)"),
                              nullable=False),
                    sa.PrimaryKeyConstraint('measure_class_id',
                                            name='pk_measure_classes'),
                    schema='clinicaltrials',
                    postgresql_ignore_search_path=False
                    )
    op.create_table('participant_flows',
                    sa.Column('participant_flow_id', sa.BIGINT(),
                              server_default=sa.text(
                                  "nextval('clinicaltrials.participant_flows_participant_flow_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('recruitment_details', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.Column('pre_assignment_details', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('participant_flow_id',
                                            name='pk_participant_flows'),
                    schema='clinicaltrials',
                    postgresql_ignore_search_path=False
                    )
    op.create_table('measures',
                    sa.Column('measure_id', sa.BIGINT(), server_default=sa.text(
                        "nextval('clinicaltrials.measures_measure_id_seq'::regclass)"),
                              nullable=False),
                    sa.Column('title', sa.VARCHAR(), autoincrement=False,
                              nullable=False),
                    sa.Column('description', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('population', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('units', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('parameter',
                              postgresql.ENUM('GEOMETRIC', 'GLS_MEAN',
                                              'LS_MEAN', 'LOG_MEAN', 'MEAN',
                                              'MEDIAN', 'NUMBER',
                                              'PARTICIPANTS', 'UNITS',
                                              name='measureparametertype'),
                              autoincrement=False, nullable=False),
                    sa.Column('dispersion', sa.VARCHAR(), autoincrement=False,
                              nullable=True),
                    sa.Column('units_analyzed', sa.VARCHAR(),
                              autoincrement=False, nullable=True),
                    sa.PrimaryKeyConstraint('measure_id', name='pk_measures'),
                    schema='clinicaltrials',
                    postgresql_ignore_search_path=False
                    )
    op.create_table('participants',
    sa.Column('participant_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.participants_participant_id_seq'::regclass)"), nullable=False),
    sa.Column('group_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('count', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['clinicaltrials.groups.group_id'], name='fk_participants_group_id_groups'),
    sa.PrimaryKeyConstraint('participant_id', name='pk_participants'),
    schema='clinicaltrials'
    )
    op.create_table('milestones',
    sa.Column('milestone_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.milestones_milestone_id_seq'::regclass)"), nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('milestone_id', name='pk_milestones'),
    schema='clinicaltrials'
    )
    op.create_table('event_lists',
    sa.Column('event_list_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.event_lists_event_list_id_seq'::regclass)"), nullable=False),
    sa.Column('frequency_threshold', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('default_vocab', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('default_assessment', postgresql.ENUM('SYSTEMATIC', 'NON_SYSTEMATIC', name='eventassessmenttype'), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('event_list_id', name='pk_event_lists'),
    schema='clinicaltrials'
    )
    op.create_index('ix_clinicaltrials_event_lists_default_assessment', 'event_lists', ['default_assessment'], unique=False, schema='clinicaltrials')
    op.create_table('milestone_participants',
    sa.Column('milestone_participant_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.milestone_participants_milestone_participant_id_seq'::regclass)"), nullable=False),
    sa.Column('milestone_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('participant_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['milestone_id'], ['clinicaltrials.milestones.milestone_id'], name='fk_milestone_participants_milestone_id_milestones'),
    sa.ForeignKeyConstraint(['participant_id'], ['clinicaltrials.participants.participant_id'], name='fk_milestone_participants_participant_id_participants'),
    sa.PrimaryKeyConstraint('milestone_participant_id', name='pk_milestone_participants'),
    sa.UniqueConstraint('milestone_id', 'participant_id', name='uq_milestone_participants_milestone_id'),
    schema='clinicaltrials'
    )
    op.create_table('result_outcome_groups',
    sa.Column('result_outcome_group_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.result_outcome_groups_result_outcome_group_id_seq'::regclass)"), nullable=False),
    sa.Column('result_outcome_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['clinicaltrials.groups.group_id'], name='fk_result_outcome_groups_group_id_groups'),
    sa.ForeignKeyConstraint(['result_outcome_id'], ['clinicaltrials.result_outcomes.result_outcome_id'], name='fk_result_outcome_groups_result_outcome_id_result_outcomes'),
    sa.PrimaryKeyConstraint('result_outcome_group_id', name='pk_result_outcome_groups'),
    schema='clinicaltrials'
    )
    op.create_table('event_categories',
    sa.Column('event_category_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.event_categories_event_category_id_seq'::regclass)"), nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('event_category_id', name='pk_event_categories'),
    schema='clinicaltrials',
    postgresql_ignore_search_path=False
    )
    op.create_table('events',
    sa.Column('event_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.events_event_id_seq'::regclass)"), nullable=False),
    sa.Column('sub_title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('assessment', postgresql.ENUM('SYSTEMATIC', 'NON_SYSTEMATIC', name='eventassessmenttype'), autoincrement=False, nullable=True),
    sa.Column('description', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('event_id', name='pk_events'),
    schema='clinicaltrials',
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_clinicaltrials_events_assessment', 'events', ['assessment'], unique=False, schema='clinicaltrials')
    op.create_table('baseline_groups',
    sa.Column('baseline_group_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.baseline_groups_baseline_group_id_seq'::regclass)"), nullable=False),
    sa.Column('baseline_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['baseline_id'], ['clinicaltrials.baselines.baseline_id'], name='fk_baseline_groups_baseline_id_baselines'),
    sa.ForeignKeyConstraint(['group_id'], ['clinicaltrials.groups.group_id'], name='fk_baseline_groups_group_id_groups'),
    sa.PrimaryKeyConstraint('baseline_group_id', name='pk_baseline_groups'),
    sa.UniqueConstraint('baseline_id', 'group_id', name='uq_baseline_groups_baseline_id'),
    schema='clinicaltrials'
    )
    op.create_table('analysis_groups',
    sa.Column('analysis_group_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.analysis_groups_analysis_group_id_seq'::regclass)"), nullable=False),
    sa.Column('analysis_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['analysis_id'], ['clinicaltrials.analyses.analysis_id'], name='fk_analysis_groups_analysis_id_analyses'),
    sa.ForeignKeyConstraint(['group_id'], ['clinicaltrials.groups.group_id'], name='fk_analysis_groups_group_id_groups'),
    sa.PrimaryKeyConstraint('analysis_group_id', name='pk_analysis_groups'),
    sa.UniqueConstraint('analysis_id', 'group_id', name='uq_analysis_groups_analysis_id'),
    schema='clinicaltrials'
    )
    op.create_table('measure_analyzed_counts',
    sa.Column('measure_analyzed_count_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.measure_analyzed_counts_measure_analyzed_count_id_seq'::regclass)"), nullable=False),
    sa.Column('measure_analyzed_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('measure_count_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['measure_analyzed_id'], ['clinicaltrials.measure_analyzeds.measure_analyzed_id'], name='fk_measure_analyzed_counts_measure_analyzed_id_measure_analyzed'),
    sa.ForeignKeyConstraint(['measure_count_id'], ['clinicaltrials.measure_counts.measure_count_id'], name='fk_measure_analyzed_counts_measure_count_id_measure_counts'),
    sa.PrimaryKeyConstraint('measure_analyzed_count_id', name='pk_measure_analyzed_counts'),
    schema='clinicaltrials'
    )
    op.create_table('reported_event_groups',
    sa.Column('reported_event_group_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.reported_event_groups_reported_event_group_id_seq'::regclass)"), nullable=False),
    sa.Column('reported_event_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['clinicaltrials.groups.group_id'], name='fk_reported_event_groups_group_id_groups'),
    sa.ForeignKeyConstraint(['reported_event_id'], ['clinicaltrials.reported_events.reported_event_id'], name='fk_reported_event_groups_reported_event_id_reported_events'),
    sa.PrimaryKeyConstraint('reported_event_group_id', name='pk_reported_event_groups'),
    sa.UniqueConstraint('reported_event_id', 'group_id', name='uq_reported_event_groups_reported_event_id'),
    schema='clinicaltrials'
    )
    op.create_table('participant_flow_groups',
    sa.Column('participant_flow_group_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.participant_flow_groups_participant_flow_group_id_seq'::regclass)"), nullable=False),
    sa.Column('participant_flow_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['group_id'], ['clinicaltrials.groups.group_id'], name='fk_participant_flow_groups_group_id_groups'),
    sa.ForeignKeyConstraint(['participant_flow_id'], ['clinicaltrials.participant_flows.participant_flow_id'], name='fk_participant_flow_groups_participant_flow_id_participant_flow'),
    sa.PrimaryKeyConstraint('participant_flow_group_id', name='pk_participant_flow_groups'),
    sa.UniqueConstraint('participant_flow_id', 'group_id', name='uq_participant_flow_groups_participant_flow_id'),
    schema='clinicaltrials'
    )
    op.create_table('baseline_measures',
    sa.Column('baseline_measure_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.baseline_measures_baseline_measure_id_seq'::regclass)"), nullable=False),
    sa.Column('baseline_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('measure_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['baseline_id'], ['clinicaltrials.baselines.baseline_id'], name='fk_baseline_measures_baseline_id_baselines'),
    sa.ForeignKeyConstraint(['measure_id'], ['clinicaltrials.measures.measure_id'], name='fk_baseline_measures_measure_id_measures'),
    sa.PrimaryKeyConstraint('baseline_measure_id', name='pk_baseline_measures'),
    sa.UniqueConstraint('baseline_id', 'measure_id', name='uq_baseline_measures_baseline_id'),
    schema='clinicaltrials'
    )
    op.create_table('period_milestones',
    sa.Column('period_milestone_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.period_milestones_period_milestone_id_seq'::regclass)"), nullable=False),
    sa.Column('period_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('milestone_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['milestone_id'], ['clinicaltrials.milestones.milestone_id'], name='fk_period_milestones_milestone_id_milestones'),
    sa.ForeignKeyConstraint(['period_id'], ['clinicaltrials.periods.period_id'], name='fk_period_milestones_period_id_periods'),
    sa.PrimaryKeyConstraint('period_milestone_id', name='pk_period_milestones'),
    sa.UniqueConstraint('period_id', 'milestone_id', name='uq_period_milestones_period_id'),
    schema='clinicaltrials'
    )
    op.create_table('event_counts',
    sa.Column('event_count_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.event_counts_event_count_id_seq'::regclass)"), nullable=False),
    sa.Column('group_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('subjects_affected', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('subjects_at_risk', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('events', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['clinicaltrials.groups.group_id'], name='fk_event_counts_group_id_groups'),
    sa.PrimaryKeyConstraint('event_count_id', name='pk_event_counts'),
    schema='clinicaltrials',
    postgresql_ignore_search_path=False
    )
    op.create_table('event_category_events',
    sa.Column('event_category_event_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.event_category_events_event_category_event_id_seq'::regclass)"), nullable=False),
    sa.Column('event_category_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('event_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['event_category_id'], ['clinicaltrials.event_categories.event_category_id'], name='fk_event_category_events_event_category_id_event_categories'),
    sa.ForeignKeyConstraint(['event_id'], ['clinicaltrials.events.event_id'], name='fk_event_category_events_event_id_events'),
    sa.PrimaryKeyConstraint('event_category_event_id', name='pk_event_category_events'),
    sa.UniqueConstraint('event_category_id', 'event_id', name='uq_event_category_events_event_category_id'),
    schema='clinicaltrials'
    )
    op.create_table('measure_class_analyzeds',
    sa.Column('measure_class_analyzed_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.measure_class_analyzeds_measure_class_analyzed_id_seq'::regclass)"), nullable=False),
    sa.Column('measure_class_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('measure_analyzed_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['measure_analyzed_id'], ['clinicaltrials.measure_analyzeds.measure_analyzed_id'], name='fk_measure_class_analyzeds_measure_analyzed_id_measure_analyzed'),
    sa.ForeignKeyConstraint(['measure_class_id'], ['clinicaltrials.measure_classes.measure_class_id'], name='fk_measure_class_analyzeds_measure_class_id_measure_classes'),
    sa.PrimaryKeyConstraint('measure_class_analyzed_id', name='pk_measure_class_analyzeds'),
    schema='clinicaltrials'
    )
    op.create_table('drop_withdraw_reasons',
    sa.Column('drop_withdraw_reason_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.drop_withdraw_reasons_drop_withdraw_reason_id_seq'::regclass)"), nullable=False),
    sa.Column('title', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('drop_withdraw_reason_id', name='pk_drop_withdraw_reasons'),
    schema='clinicaltrials',
    postgresql_ignore_search_path=False
    )
    op.create_table('measure_measure_analyzeds',
    sa.Column('measure_measure_analyzed_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.measure_measure_analyzeds_measure_measure_analyzed_id_seq'::regclass)"), nullable=False),
    sa.Column('measure_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('measure_analyzed_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['measure_analyzed_id'], ['clinicaltrials.measure_analyzeds.measure_analyzed_id'], name='fk_measure_measure_analyzeds_measure_analyzed_id_measure_analyz'),
    sa.ForeignKeyConstraint(['measure_id'], ['clinicaltrials.measures.measure_id'], name='fk_measure_measure_analyzeds_measure_id_measures'),
    sa.PrimaryKeyConstraint('measure_measure_analyzed_id', name='pk_measure_measure_analyzeds'),
    schema='clinicaltrials'
    )
    op.create_table('baseline_measure_analyzeds',
    sa.Column('baseline_measure_analyzed_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.baseline_measure_analyzeds_baseline_measure_analyzed_id_seq'::regclass)"), nullable=False),
    sa.Column('baseline_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('measure_analyzed_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['baseline_id'], ['clinicaltrials.baselines.baseline_id'], name='fk_baseline_measure_analyzeds_baseline_id_baselines'),
    sa.ForeignKeyConstraint(['measure_analyzed_id'], ['clinicaltrials.measure_analyzeds.measure_analyzed_id'], name='fk_baseline_measure_analyzeds_measure_analyzed_id_measure_analy'),
    sa.PrimaryKeyConstraint('baseline_measure_analyzed_id', name='pk_baseline_measure_analyzeds'),
    sa.UniqueConstraint('baseline_id', 'measure_analyzed_id', name='uq_baseline_measure_analyzeds_baseline_id'),
    schema='clinicaltrials'
    )
    op.create_table('period_drop_withdraw_reasons',
    sa.Column('period_drop_withdraw_reason_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.period_drop_withdraw_reasons_period_drop_withdraw_reason_id_seq'::regclass)"), nullable=False),
    sa.Column('period_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('drop_withdraw_reason_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['drop_withdraw_reason_id'], ['clinicaltrials.drop_withdraw_reasons.drop_withdraw_reason_id'], name='fk_period_drop_withdraw_reasons_drop_withdraw_reason_id_drop_wi'),
    sa.ForeignKeyConstraint(['period_id'], ['clinicaltrials.periods.period_id'], name='fk_period_drop_withdraw_reasons_period_id_periods'),
    sa.PrimaryKeyConstraint('period_drop_withdraw_reason_id', name='pk_period_drop_withdraw_reasons'),
    sa.UniqueConstraint('period_id', 'drop_withdraw_reason_id', name='uq_period_drop_withdraw_reasons_period_id'),
    schema='clinicaltrials'
    )
    op.create_table('measurements',
    sa.Column('measurement_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.measurements_measurement_id_seq'::regclass)"), nullable=False),
    sa.Column('group_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('spread', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('lower_limit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('upper_limit', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['group_id'], ['clinicaltrials.groups.group_id'], name='fk_measurements_group_id_groups'),
    sa.PrimaryKeyConstraint('measurement_id', name='pk_measurements'),
    schema='clinicaltrials',
    postgresql_ignore_search_path=False
    )
    op.create_table('measure_class_categories',
    sa.Column('measure_class_category_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.measure_class_categories_measure_class_category_id_seq'::regclass)"), nullable=False),
    sa.Column('measure_class_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('measure_category_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['measure_category_id'], ['clinicaltrials.measure_categories.measure_category_id'], name='fk_measure_class_categories_measure_category_id_measure_categor'),
    sa.ForeignKeyConstraint(['measure_class_id'], ['clinicaltrials.measure_classes.measure_class_id'], name='fk_measure_class_categories_measure_class_id_measure_classes'),
    sa.PrimaryKeyConstraint('measure_class_category_id', name='pk_measure_class_categories'),
    schema='clinicaltrials'
    )
    op.create_table('event_event_counts',
    sa.Column('event_event_count_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.event_event_counts_event_event_count_id_seq'::regclass)"), nullable=False),
    sa.Column('event_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('event_count_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['event_count_id'], ['clinicaltrials.event_counts.event_count_id'], name='fk_event_event_counts_event_count_id_event_counts'),
    sa.ForeignKeyConstraint(['event_id'], ['clinicaltrials.events.event_id'], name='fk_event_event_counts_event_id_events'),
    sa.PrimaryKeyConstraint('event_event_count_id', name='pk_event_event_counts'),
    sa.UniqueConstraint('event_id', 'event_count_id', name='uq_event_event_counts_event_id'),
    schema='clinicaltrials'
    )
    op.create_table('event_list_categories',
    sa.Column('event_list_category_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.event_list_categories_event_list_category_id_seq'::regclass)"), nullable=False),
    sa.Column('event_list_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('event_category_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['event_category_id'], ['clinicaltrials.event_categories.event_category_id'], name='fk_event_list_categories_event_category_id_event_categories'),
    sa.ForeignKeyConstraint(['event_list_id'], ['clinicaltrials.event_lists.event_list_id'], name='fk_event_list_categories_event_list_id_event_lists'),
    sa.PrimaryKeyConstraint('event_list_category_id', name='pk_event_list_categories'),
    sa.UniqueConstraint('event_list_id', 'event_category_id', name='uq_event_list_categories_event_list_id'),
    schema='clinicaltrials'
    )
    op.create_table('measure_category_measurements',
    sa.Column('measure_category_measurement_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.measure_category_measurements_measure_category_measurement__seq'::regclass)"), nullable=False),
    sa.Column('measure_category_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('measurement_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['measure_category_id'], ['clinicaltrials.measure_categories.measure_category_id'], name='fk_measure_category_measurements_measure_category_id_measure_ca'),
    sa.ForeignKeyConstraint(['measurement_id'], ['clinicaltrials.measurements.measurement_id'], name='fk_measure_category_measurements_measurement_id_measurements'),
    sa.PrimaryKeyConstraint('measure_category_measurement_id', name='pk_measure_category_measurements'),
    schema='clinicaltrials'
    )
    op.create_table('measure_measure_classes',
    sa.Column('measure_measure_class_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.measure_measure_classes_measure_measure_class_id_seq'::regclass)"), nullable=False),
    sa.Column('measure_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('measure_class_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['measure_class_id'], ['clinicaltrials.measure_classes.measure_class_id'], name='fk_measure_measure_classes_measure_class_id_measure_classes'),
    sa.ForeignKeyConstraint(['measure_id'], ['clinicaltrials.measures.measure_id'], name='fk_measure_measure_classes_measure_id_measures'),
    sa.PrimaryKeyConstraint('measure_measure_class_id', name='pk_measure_measure_classes'),
    schema='clinicaltrials'
    )
    op.create_table('participant_flow_periods',
    sa.Column('participant_flow_period_id', sa.BIGINT(), server_default=sa.text("nextval('clinicaltrials.participant_flow_periods_participant_flow_period_id_seq'::regclass)"), nullable=False),
    sa.Column('participant_flow_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.Column('period_id', sa.BIGINT(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['participant_flow_id'], ['clinicaltrials.participant_flows.participant_flow_id'], name='fk_participant_flow_periods_participant_flow_id_participant_flo'),
    sa.ForeignKeyConstraint(['period_id'], ['clinicaltrials.periods.period_id'], name='fk_participant_flow_periods_period_id_periods'),
    sa.PrimaryKeyConstraint('participant_flow_period_id', name='pk_participant_flow_periods'),
    sa.UniqueConstraint('participant_flow_id', 'period_id', name='uq_participant_flow_periods_participant_flow_id'),
    schema='clinicaltrials'
    )
    # ### end Alembic commands ###
